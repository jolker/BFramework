/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.framework.thriftgen.xgame.tcommon;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TInternalResponse implements org.apache.thrift.TBase<TInternalResponse, TInternalResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TInternalResponse");

  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MSG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("msgData", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TInternalResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TInternalResponseTupleSchemeFactory());
  }

  public int msgType; // required
  public ByteBuffer msgData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_TYPE((short)1, "msgType"),
    MSG_DATA((short)2, "msgData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_TYPE
          return MSG_TYPE;
        case 2: // MSG_DATA
          return MSG_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGTYPE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MSG_DATA, new org.apache.thrift.meta_data.FieldMetaData("msgData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TInternalResponse.class, metaDataMap);
  }

  public TInternalResponse() {
  }

  public TInternalResponse(
    int msgType,
    ByteBuffer msgData)
  {
    this();
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    this.msgData = msgData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TInternalResponse(TInternalResponse other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.msgType = other.msgType;
    if (other.isSetMsgData()) {
      this.msgData = org.apache.thrift.TBaseHelper.copyBinary(other.msgData);
;
    }
  }

  public TInternalResponse deepCopy() {
    return new TInternalResponse(this);
  }

  @Override
  public void clear() {
    setMsgTypeIsSet(false);
    this.msgType = 0;
    this.msgData = null;
  }

  public int getMsgType() {
    return this.msgType;
  }

  public TInternalResponse setMsgType(int msgType) {
    this.msgType = msgType;
    setMsgTypeIsSet(true);
    return this;
  }

  public void unsetMsgType() {
    __isset_bit_vector.clear(__MSGTYPE_ISSET_ID);
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return __isset_bit_vector.get(__MSGTYPE_ISSET_ID);
  }

  public void setMsgTypeIsSet(boolean value) {
    __isset_bit_vector.set(__MSGTYPE_ISSET_ID, value);
  }

  public byte[] getMsgData() {
    setMsgData(org.apache.thrift.TBaseHelper.rightSize(msgData));
    return msgData == null ? null : msgData.array();
  }

  public ByteBuffer bufferForMsgData() {
    return msgData;
  }

  public TInternalResponse setMsgData(byte[] msgData) {
    setMsgData(msgData == null ? (ByteBuffer)null : ByteBuffer.wrap(msgData));
    return this;
  }

  public TInternalResponse setMsgData(ByteBuffer msgData) {
    this.msgData = msgData;
    return this;
  }

  public void unsetMsgData() {
    this.msgData = null;
  }

  /** Returns true if field msgData is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgData() {
    return this.msgData != null;
  }

  public void setMsgDataIsSet(boolean value) {
    if (!value) {
      this.msgData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((Integer)value);
      }
      break;

    case MSG_DATA:
      if (value == null) {
        unsetMsgData();
      } else {
        setMsgData((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_TYPE:
      return Integer.valueOf(getMsgType());

    case MSG_DATA:
      return getMsgData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_TYPE:
      return isSetMsgType();
    case MSG_DATA:
      return isSetMsgData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TInternalResponse)
      return this.equals((TInternalResponse)that);
    return false;
  }

  public boolean equals(TInternalResponse that) {
    if (that == null)
      return false;

    boolean this_present_msgType = true;
    boolean that_present_msgType = true;
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (this.msgType != that.msgType)
        return false;
    }

    boolean this_present_msgData = true && this.isSetMsgData();
    boolean that_present_msgData = true && that.isSetMsgData();
    if (this_present_msgData || that_present_msgData) {
      if (!(this_present_msgData && that_present_msgData))
        return false;
      if (!this.msgData.equals(that.msgData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TInternalResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TInternalResponse typedOther = (TInternalResponse)other;

    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(typedOther.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, typedOther.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgData()).compareTo(typedOther.isSetMsgData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgData, typedOther.msgData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TInternalResponse(");
    boolean first = true;

    sb.append("msgType:");
    sb.append(this.msgType);
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgData:");
    if (this.msgData == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.msgData, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TInternalResponseStandardSchemeFactory implements SchemeFactory {
    public TInternalResponseStandardScheme getScheme() {
      return new TInternalResponseStandardScheme();
    }
  }

  private static class TInternalResponseStandardScheme extends StandardScheme<TInternalResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TInternalResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgType = iprot.readI32();
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MSG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgData = iprot.readBinary();
              struct.setMsgDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TInternalResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
      oprot.writeI32(struct.msgType);
      oprot.writeFieldEnd();
      if (struct.msgData != null) {
        oprot.writeFieldBegin(MSG_DATA_FIELD_DESC);
        oprot.writeBinary(struct.msgData);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TInternalResponseTupleSchemeFactory implements SchemeFactory {
    public TInternalResponseTupleScheme getScheme() {
      return new TInternalResponseTupleScheme();
    }
  }

  private static class TInternalResponseTupleScheme extends TupleScheme<TInternalResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TInternalResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgType()) {
        optionals.set(0);
      }
      if (struct.isSetMsgData()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMsgType()) {
        oprot.writeI32(struct.msgType);
      }
      if (struct.isSetMsgData()) {
        oprot.writeBinary(struct.msgData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TInternalResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.msgType = iprot.readI32();
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.msgData = iprot.readBinary();
        struct.setMsgDataIsSet(true);
      }
    }
  }

}

