/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.bliss.framework.thriftgen.xgame.xgameservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TXGameService {

  public interface Iface extends com.bliss.framework.thriftgen.xgame.tcommon.TServiceBase.Iface {

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo pushMessage(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException;

    public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse internalCall(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException;

    public LogoutStatus logout(String token, int userid, int moduleid, int roomid, LogoutReason reason) throws org.apache.thrift.TException;

    public void reconnect(String token, int userid, String params) throws org.apache.thrift.TException;

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo perform(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data) throws org.apache.thrift.TException;

    public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus getStatus() throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.bliss.framework.thriftgen.xgame.tcommon.TServiceBase .AsyncIface {

    public void pushMessage(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.pushMessage_call> resultHandler) throws org.apache.thrift.TException;

    public void internalCall(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.internalCall_call> resultHandler) throws org.apache.thrift.TException;

    public void logout(String token, int userid, int moduleid, int roomid, LogoutReason reason, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.logout_call> resultHandler) throws org.apache.thrift.TException;

    public void reconnect(String token, int userid, String params, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.reconnect_call> resultHandler) throws org.apache.thrift.TException;

    public void perform(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.perform_call> resultHandler) throws org.apache.thrift.TException;

    public void getStatus(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.getStatus_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.bliss.framework.thriftgen.xgame.tcommon.TServiceBase.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo pushMessage(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException
    {
      send_pushMessage(token, moduleid, clientInfo, msgType, length, msgData);
      return recv_pushMessage();
    }

    public void send_pushMessage(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException
    {
      pushMessage_args args = new pushMessage_args();
      args.setToken(token);
      args.setModuleid(moduleid);
      args.setClientInfo(clientInfo);
      args.setMsgType(msgType);
      args.setLength(length);
      args.setMsgData(msgData);
      sendBase("pushMessage", args);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo recv_pushMessage() throws org.apache.thrift.TException
    {
      pushMessage_result result = new pushMessage_result();
      receiveBase(result, "pushMessage");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pushMessage failed: unknown result");
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse internalCall(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException
    {
      send_internalCall(token, moduleid, userid, msgType, length, msgData);
      return recv_internalCall();
    }

    public void send_internalCall(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData) throws org.apache.thrift.TException
    {
      internalCall_args args = new internalCall_args();
      args.setToken(token);
      args.setModuleid(moduleid);
      args.setUserid(userid);
      args.setMsgType(msgType);
      args.setLength(length);
      args.setMsgData(msgData);
      sendBase("internalCall", args);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse recv_internalCall() throws org.apache.thrift.TException
    {
      internalCall_result result = new internalCall_result();
      receiveBase(result, "internalCall");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "internalCall failed: unknown result");
    }

    public LogoutStatus logout(String token, int userid, int moduleid, int roomid, LogoutReason reason) throws org.apache.thrift.TException
    {
      send_logout(token, userid, moduleid, roomid, reason);
      return recv_logout();
    }

    public void send_logout(String token, int userid, int moduleid, int roomid, LogoutReason reason) throws org.apache.thrift.TException
    {
      logout_args args = new logout_args();
      args.setToken(token);
      args.setUserid(userid);
      args.setModuleid(moduleid);
      args.setRoomid(roomid);
      args.setReason(reason);
      sendBase("logout", args);
    }

    public LogoutStatus recv_logout() throws org.apache.thrift.TException
    {
      logout_result result = new logout_result();
      receiveBase(result, "logout");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "logout failed: unknown result");
    }

    public void reconnect(String token, int userid, String params) throws org.apache.thrift.TException
    {
      send_reconnect(token, userid, params);
      recv_reconnect();
    }

    public void send_reconnect(String token, int userid, String params) throws org.apache.thrift.TException
    {
      reconnect_args args = new reconnect_args();
      args.setToken(token);
      args.setUserid(userid);
      args.setParams(params);
      sendBase("reconnect", args);
    }

    public void recv_reconnect() throws org.apache.thrift.TException
    {
      reconnect_result result = new reconnect_result();
      receiveBase(result, "reconnect");
      return;
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo perform(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data) throws org.apache.thrift.TException
    {
      send_perform(cmd, token, data);
      return recv_perform();
    }

    public void send_perform(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data) throws org.apache.thrift.TException
    {
      perform_args args = new perform_args();
      args.setCmd(cmd);
      args.setToken(token);
      args.setData(data);
      sendBase("perform", args);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo recv_perform() throws org.apache.thrift.TException
    {
      perform_result result = new perform_result();
      receiveBase(result, "perform");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "perform failed: unknown result");
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus getStatus() throws org.apache.thrift.TException
    {
      send_getStatus();
      return recv_getStatus();
    }

    public void send_getStatus() throws org.apache.thrift.TException
    {
      getStatus_args args = new getStatus_args();
      sendBase("getStatus", args);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus recv_getStatus() throws org.apache.thrift.TException
    {
      getStatus_result result = new getStatus_result();
      receiveBase(result, "getStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends com.bliss.framework.thriftgen.xgame.tcommon.TServiceBase.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void pushMessage(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<pushMessage_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pushMessage_call method_call = new pushMessage_call(token, moduleid, clientInfo, msgType, length, msgData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pushMessage_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private int moduleid;
      private com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo;
      private int msgType;
      private int length;
      private ByteBuffer msgData;
      public pushMessage_call(String token, int moduleid, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<pushMessage_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.moduleid = moduleid;
        this.clientInfo = clientInfo;
        this.msgType = msgType;
        this.length = length;
        this.msgData = msgData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pushMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pushMessage_args args = new pushMessage_args();
        args.setToken(token);
        args.setModuleid(moduleid);
        args.setClientInfo(clientInfo);
        args.setMsgType(msgType);
        args.setLength(length);
        args.setMsgData(msgData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pushMessage();
      }
    }

    public void internalCall(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<internalCall_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      internalCall_call method_call = new internalCall_call(token, moduleid, userid, msgType, length, msgData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class internalCall_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private int moduleid;
      private int userid;
      private int msgType;
      private int length;
      private ByteBuffer msgData;
      public internalCall_call(String token, int moduleid, int userid, int msgType, int length, ByteBuffer msgData, org.apache.thrift.async.AsyncMethodCallback<internalCall_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.moduleid = moduleid;
        this.userid = userid;
        this.msgType = msgType;
        this.length = length;
        this.msgData = msgData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("internalCall", org.apache.thrift.protocol.TMessageType.CALL, 0));
        internalCall_args args = new internalCall_args();
        args.setToken(token);
        args.setModuleid(moduleid);
        args.setUserid(userid);
        args.setMsgType(msgType);
        args.setLength(length);
        args.setMsgData(msgData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_internalCall();
      }
    }

    public void logout(String token, int userid, int moduleid, int roomid, LogoutReason reason, org.apache.thrift.async.AsyncMethodCallback<logout_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logout_call method_call = new logout_call(token, userid, moduleid, roomid, reason, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private int userid;
      private int moduleid;
      private int roomid;
      private LogoutReason reason;
      public logout_call(String token, int userid, int moduleid, int roomid, LogoutReason reason, org.apache.thrift.async.AsyncMethodCallback<logout_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.userid = userid;
        this.moduleid = moduleid;
        this.roomid = roomid;
        this.reason = reason;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logout_args args = new logout_args();
        args.setToken(token);
        args.setUserid(userid);
        args.setModuleid(moduleid);
        args.setRoomid(roomid);
        args.setReason(reason);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LogoutStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_logout();
      }
    }

    public void reconnect(String token, int userid, String params, org.apache.thrift.async.AsyncMethodCallback<reconnect_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reconnect_call method_call = new reconnect_call(token, userid, params, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reconnect_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String token;
      private int userid;
      private String params;
      public reconnect_call(String token, int userid, String params, org.apache.thrift.async.AsyncMethodCallback<reconnect_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.token = token;
        this.userid = userid;
        this.params = params;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reconnect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reconnect_args args = new reconnect_args();
        args.setToken(token);
        args.setUserid(userid);
        args.setParams(params);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reconnect();
      }
    }

    public void perform(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data, org.apache.thrift.async.AsyncMethodCallback<perform_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      perform_call method_call = new perform_call(cmd, token, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class perform_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd;
      private String token;
      private com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data;
      public perform_call(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd, String token, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data, org.apache.thrift.async.AsyncMethodCallback<perform_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cmd = cmd;
        this.token = token;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("perform", org.apache.thrift.protocol.TMessageType.CALL, 0));
        perform_args args = new perform_args();
        args.setCmd(cmd);
        args.setToken(token);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_perform();
      }
    }

    public void getStatus(org.apache.thrift.async.AsyncMethodCallback<getStatus_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getStatus_call method_call = new getStatus_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getStatus_call(org.apache.thrift.async.AsyncMethodCallback<getStatus_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getStatus_args args = new getStatus_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.bliss.framework.thriftgen.xgame.tcommon.TServiceBase.Processor implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("pushMessage", new pushMessage());
      processMap.put("internalCall", new internalCall());
      processMap.put("logout", new logout());
      processMap.put("reconnect", new reconnect());
      processMap.put("perform", new perform());
      processMap.put("getStatus", new getStatus());
      return processMap;
    }

    private static class pushMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pushMessage_args> {
      public pushMessage() {
        super("pushMessage");
      }

      protected pushMessage_args getEmptyArgsInstance() {
        return new pushMessage_args();
      }

      protected pushMessage_result getResult(I iface, pushMessage_args args) throws org.apache.thrift.TException {
        pushMessage_result result = new pushMessage_result();
        result.success = iface.pushMessage(args.token, args.moduleid, args.clientInfo, args.msgType, args.length, args.msgData);
        return result;
      }
    }

    private static class internalCall<I extends Iface> extends org.apache.thrift.ProcessFunction<I, internalCall_args> {
      public internalCall() {
        super("internalCall");
      }

      protected internalCall_args getEmptyArgsInstance() {
        return new internalCall_args();
      }

      protected internalCall_result getResult(I iface, internalCall_args args) throws org.apache.thrift.TException {
        internalCall_result result = new internalCall_result();
        result.success = iface.internalCall(args.token, args.moduleid, args.userid, args.msgType, args.length, args.msgData);
        return result;
      }
    }

    private static class logout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logout_args> {
      public logout() {
        super("logout");
      }

      protected logout_args getEmptyArgsInstance() {
        return new logout_args();
      }

      protected logout_result getResult(I iface, logout_args args) throws org.apache.thrift.TException {
        logout_result result = new logout_result();
        result.success = iface.logout(args.token, args.userid, args.moduleid, args.roomid, args.reason);
        return result;
      }
    }

    private static class reconnect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reconnect_args> {
      public reconnect() {
        super("reconnect");
      }

      protected reconnect_args getEmptyArgsInstance() {
        return new reconnect_args();
      }

      protected reconnect_result getResult(I iface, reconnect_args args) throws org.apache.thrift.TException {
        reconnect_result result = new reconnect_result();
        iface.reconnect(args.token, args.userid, args.params);
        return result;
      }
    }

    private static class perform<I extends Iface> extends org.apache.thrift.ProcessFunction<I, perform_args> {
      public perform() {
        super("perform");
      }

      protected perform_args getEmptyArgsInstance() {
        return new perform_args();
      }

      protected perform_result getResult(I iface, perform_args args) throws org.apache.thrift.TException {
        perform_result result = new perform_result();
        result.success = iface.perform(args.cmd, args.token, args.data);
        return result;
      }
    }

    private static class getStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getStatus_args> {
      public getStatus() {
        super("getStatus");
      }

      protected getStatus_args getEmptyArgsInstance() {
        return new getStatus_args();
      }

      protected getStatus_result getResult(I iface, getStatus_args args) throws org.apache.thrift.TException {
        getStatus_result result = new getStatus_result();
        result.success = iface.getStatus();
        return result;
      }
    }

  }

  public static class pushMessage_args implements org.apache.thrift.TBase<pushMessage_args, pushMessage_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushMessage_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MODULEID_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("clientInfo", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField MSG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("msgData", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushMessage_argsTupleSchemeFactory());
    }

    public String token; // required
    public int moduleid; // required
    public com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo; // required
    public int msgType; // required
    public int length; // required
    public ByteBuffer msgData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      MODULEID((short)2, "moduleid"),
      CLIENT_INFO((short)3, "clientInfo"),
      MSG_TYPE((short)4, "msgType"),
      LENGTH((short)5, "length"),
      MSG_DATA((short)6, "msgData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // MODULEID
            return MODULEID;
          case 3: // CLIENT_INFO
            return CLIENT_INFO;
          case 4: // MSG_TYPE
            return MSG_TYPE;
          case 5: // LENGTH
            return LENGTH;
          case 6: // MSG_DATA
            return MSG_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODULEID_ISSET_ID = 0;
    private static final int __MSGTYPE_ISSET_ID = 1;
    private static final int __LENGTH_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULEID, new org.apache.thrift.meta_data.FieldMetaData("moduleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CLIENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("clientInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo.class)));
      tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MSG_DATA, new org.apache.thrift.meta_data.FieldMetaData("msgData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushMessage_args.class, metaDataMap);
    }

    public pushMessage_args() {
    }

    public pushMessage_args(
      String token,
      int moduleid,
      com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo,
      int msgType,
      int length,
      ByteBuffer msgData)
    {
      this();
      this.token = token;
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      this.clientInfo = clientInfo;
      this.msgType = msgType;
      setMsgTypeIsSet(true);
      this.length = length;
      setLengthIsSet(true);
      this.msgData = msgData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushMessage_args(pushMessage_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.moduleid = other.moduleid;
      if (other.isSetClientInfo()) {
        this.clientInfo = new com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo(other.clientInfo);
      }
      this.msgType = other.msgType;
      this.length = other.length;
      if (other.isSetMsgData()) {
        this.msgData = org.apache.thrift.TBaseHelper.copyBinary(other.msgData);
;
      }
    }

    public pushMessage_args deepCopy() {
      return new pushMessage_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setModuleidIsSet(false);
      this.moduleid = 0;
      this.clientInfo = null;
      setMsgTypeIsSet(false);
      this.msgType = 0;
      setLengthIsSet(false);
      this.length = 0;
      this.msgData = null;
    }

    public String getToken() {
      return this.token;
    }

    public pushMessage_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getModuleid() {
      return this.moduleid;
    }

    public pushMessage_args setModuleid(int moduleid) {
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      return this;
    }

    public void unsetModuleid() {
      __isset_bit_vector.clear(__MODULEID_ISSET_ID);
    }

    /** Returns true if field moduleid is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleid() {
      return __isset_bit_vector.get(__MODULEID_ISSET_ID);
    }

    public void setModuleidIsSet(boolean value) {
      __isset_bit_vector.set(__MODULEID_ISSET_ID, value);
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo getClientInfo() {
      return this.clientInfo;
    }

    public pushMessage_args setClientInfo(com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo clientInfo) {
      this.clientInfo = clientInfo;
      return this;
    }

    public void unsetClientInfo() {
      this.clientInfo = null;
    }

    /** Returns true if field clientInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetClientInfo() {
      return this.clientInfo != null;
    }

    public void setClientInfoIsSet(boolean value) {
      if (!value) {
        this.clientInfo = null;
      }
    }

    public int getMsgType() {
      return this.msgType;
    }

    public pushMessage_args setMsgType(int msgType) {
      this.msgType = msgType;
      setMsgTypeIsSet(true);
      return this;
    }

    public void unsetMsgType() {
      __isset_bit_vector.clear(__MSGTYPE_ISSET_ID);
    }

    /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgType() {
      return __isset_bit_vector.get(__MSGTYPE_ISSET_ID);
    }

    public void setMsgTypeIsSet(boolean value) {
      __isset_bit_vector.set(__MSGTYPE_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public pushMessage_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bit_vector.clear(__LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return __isset_bit_vector.get(__LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
    }

    public byte[] getMsgData() {
      setMsgData(org.apache.thrift.TBaseHelper.rightSize(msgData));
      return msgData == null ? null : msgData.array();
    }

    public ByteBuffer bufferForMsgData() {
      return msgData;
    }

    public pushMessage_args setMsgData(byte[] msgData) {
      setMsgData(msgData == null ? (ByteBuffer)null : ByteBuffer.wrap(msgData));
      return this;
    }

    public pushMessage_args setMsgData(ByteBuffer msgData) {
      this.msgData = msgData;
      return this;
    }

    public void unsetMsgData() {
      this.msgData = null;
    }

    /** Returns true if field msgData is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgData() {
      return this.msgData != null;
    }

    public void setMsgDataIsSet(boolean value) {
      if (!value) {
        this.msgData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case MODULEID:
        if (value == null) {
          unsetModuleid();
        } else {
          setModuleid((Integer)value);
        }
        break;

      case CLIENT_INFO:
        if (value == null) {
          unsetClientInfo();
        } else {
          setClientInfo((com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo)value);
        }
        break;

      case MSG_TYPE:
        if (value == null) {
          unsetMsgType();
        } else {
          setMsgType((Integer)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case MSG_DATA:
        if (value == null) {
          unsetMsgData();
        } else {
          setMsgData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case MODULEID:
        return Integer.valueOf(getModuleid());

      case CLIENT_INFO:
        return getClientInfo();

      case MSG_TYPE:
        return Integer.valueOf(getMsgType());

      case LENGTH:
        return Integer.valueOf(getLength());

      case MSG_DATA:
        return getMsgData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case MODULEID:
        return isSetModuleid();
      case CLIENT_INFO:
        return isSetClientInfo();
      case MSG_TYPE:
        return isSetMsgType();
      case LENGTH:
        return isSetLength();
      case MSG_DATA:
        return isSetMsgData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushMessage_args)
        return this.equals((pushMessage_args)that);
      return false;
    }

    public boolean equals(pushMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_moduleid = true;
      boolean that_present_moduleid = true;
      if (this_present_moduleid || that_present_moduleid) {
        if (!(this_present_moduleid && that_present_moduleid))
          return false;
        if (this.moduleid != that.moduleid)
          return false;
      }

      boolean this_present_clientInfo = true && this.isSetClientInfo();
      boolean that_present_clientInfo = true && that.isSetClientInfo();
      if (this_present_clientInfo || that_present_clientInfo) {
        if (!(this_present_clientInfo && that_present_clientInfo))
          return false;
        if (!this.clientInfo.equals(that.clientInfo))
          return false;
      }

      boolean this_present_msgType = true;
      boolean that_present_msgType = true;
      if (this_present_msgType || that_present_msgType) {
        if (!(this_present_msgType && that_present_msgType))
          return false;
        if (this.msgType != that.msgType)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_msgData = true && this.isSetMsgData();
      boolean that_present_msgData = true && that.isSetMsgData();
      if (this_present_msgData || that_present_msgData) {
        if (!(this_present_msgData && that_present_msgData))
          return false;
        if (!this.msgData.equals(that.msgData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushMessage_args typedOther = (pushMessage_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleid()).compareTo(typedOther.isSetModuleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleid, typedOther.moduleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientInfo()).compareTo(typedOther.isSetClientInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientInfo, typedOther.clientInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(typedOther.isSetMsgType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, typedOther.msgType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgData()).compareTo(typedOther.isSetMsgData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgData, typedOther.msgData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushMessage_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("moduleid:");
      sb.append(this.moduleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientInfo:");
      if (this.clientInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.clientInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msgType:");
      sb.append(this.msgType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("msgData:");
      if (this.msgData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.msgData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushMessage_argsStandardSchemeFactory implements SchemeFactory {
      public pushMessage_argsStandardScheme getScheme() {
        return new pushMessage_argsStandardScheme();
      }
    }

    private static class pushMessage_argsStandardScheme extends StandardScheme<pushMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODULEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.moduleid = iprot.readI32();
                struct.setModuleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientInfo = new com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo();
                struct.clientInfo.read(iprot);
                struct.setClientInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MSG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.msgType = iprot.readI32();
                struct.setMsgTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MSG_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msgData = iprot.readBinary();
                struct.setMsgDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MODULEID_FIELD_DESC);
        oprot.writeI32(struct.moduleid);
        oprot.writeFieldEnd();
        if (struct.clientInfo != null) {
          oprot.writeFieldBegin(CLIENT_INFO_FIELD_DESC);
          struct.clientInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.msgType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        if (struct.msgData != null) {
          oprot.writeFieldBegin(MSG_DATA_FIELD_DESC);
          oprot.writeBinary(struct.msgData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushMessage_argsTupleSchemeFactory implements SchemeFactory {
      public pushMessage_argsTupleScheme getScheme() {
        return new pushMessage_argsTupleScheme();
      }
    }

    private static class pushMessage_argsTupleScheme extends TupleScheme<pushMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetModuleid()) {
          optionals.set(1);
        }
        if (struct.isSetClientInfo()) {
          optionals.set(2);
        }
        if (struct.isSetMsgType()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        if (struct.isSetMsgData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetModuleid()) {
          oprot.writeI32(struct.moduleid);
        }
        if (struct.isSetClientInfo()) {
          struct.clientInfo.write(oprot);
        }
        if (struct.isSetMsgType()) {
          oprot.writeI32(struct.msgType);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
        if (struct.isSetMsgData()) {
          oprot.writeBinary(struct.msgData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleid = iprot.readI32();
          struct.setModuleidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientInfo = new com.bliss.framework.thriftgen.xgame.tcommon.TClientInfo();
          struct.clientInfo.read(iprot);
          struct.setClientInfoIsSet(true);
        }
        if (incoming.get(3)) {
          struct.msgType = iprot.readI32();
          struct.setMsgTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
        if (incoming.get(5)) {
          struct.msgData = iprot.readBinary();
          struct.setMsgDataIsSet(true);
        }
      }
    }

  }

  public static class pushMessage_result implements org.apache.thrift.TBase<pushMessage_result, pushMessage_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pushMessage_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pushMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pushMessage_resultTupleSchemeFactory());
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pushMessage_result.class, metaDataMap);
    }

    public pushMessage_result() {
    }

    public pushMessage_result(
      com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pushMessage_result(pushMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo(other.success);
      }
    }

    public pushMessage_result deepCopy() {
      return new pushMessage_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo getSuccess() {
      return this.success;
    }

    public pushMessage_result setSuccess(com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pushMessage_result)
        return this.equals((pushMessage_result)that);
      return false;
    }

    public boolean equals(pushMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(pushMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      pushMessage_result typedOther = (pushMessage_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pushMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pushMessage_resultStandardSchemeFactory implements SchemeFactory {
      public pushMessage_resultStandardScheme getScheme() {
        return new pushMessage_resultStandardScheme();
      }
    }

    private static class pushMessage_resultStandardScheme extends StandardScheme<pushMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pushMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pushMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pushMessage_resultTupleSchemeFactory implements SchemeFactory {
      public pushMessage_resultTupleScheme getScheme() {
        return new pushMessage_resultTupleScheme();
      }
    }

    private static class pushMessage_resultTupleScheme extends TupleScheme<pushMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pushMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pushMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class internalCall_args implements org.apache.thrift.TBase<internalCall_args, internalCall_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("internalCall_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MODULEID_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField MSG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("msgData", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new internalCall_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new internalCall_argsTupleSchemeFactory());
    }

    public String token; // required
    public int moduleid; // required
    public int userid; // required
    public int msgType; // required
    public int length; // required
    public ByteBuffer msgData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      MODULEID((short)2, "moduleid"),
      USERID((short)3, "userid"),
      MSG_TYPE((short)4, "msgType"),
      LENGTH((short)5, "length"),
      MSG_DATA((short)6, "msgData");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // MODULEID
            return MODULEID;
          case 3: // USERID
            return USERID;
          case 4: // MSG_TYPE
            return MSG_TYPE;
          case 5: // LENGTH
            return LENGTH;
          case 6: // MSG_DATA
            return MSG_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MODULEID_ISSET_ID = 0;
    private static final int __USERID_ISSET_ID = 1;
    private static final int __MSGTYPE_ISSET_ID = 2;
    private static final int __LENGTH_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODULEID, new org.apache.thrift.meta_data.FieldMetaData("moduleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MSG_DATA, new org.apache.thrift.meta_data.FieldMetaData("msgData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(internalCall_args.class, metaDataMap);
    }

    public internalCall_args() {
    }

    public internalCall_args(
      String token,
      int moduleid,
      int userid,
      int msgType,
      int length,
      ByteBuffer msgData)
    {
      this();
      this.token = token;
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      this.userid = userid;
      setUseridIsSet(true);
      this.msgType = msgType;
      setMsgTypeIsSet(true);
      this.length = length;
      setLengthIsSet(true);
      this.msgData = msgData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public internalCall_args(internalCall_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.moduleid = other.moduleid;
      this.userid = other.userid;
      this.msgType = other.msgType;
      this.length = other.length;
      if (other.isSetMsgData()) {
        this.msgData = org.apache.thrift.TBaseHelper.copyBinary(other.msgData);
;
      }
    }

    public internalCall_args deepCopy() {
      return new internalCall_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setModuleidIsSet(false);
      this.moduleid = 0;
      setUseridIsSet(false);
      this.userid = 0;
      setMsgTypeIsSet(false);
      this.msgType = 0;
      setLengthIsSet(false);
      this.length = 0;
      this.msgData = null;
    }

    public String getToken() {
      return this.token;
    }

    public internalCall_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getModuleid() {
      return this.moduleid;
    }

    public internalCall_args setModuleid(int moduleid) {
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      return this;
    }

    public void unsetModuleid() {
      __isset_bit_vector.clear(__MODULEID_ISSET_ID);
    }

    /** Returns true if field moduleid is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleid() {
      return __isset_bit_vector.get(__MODULEID_ISSET_ID);
    }

    public void setModuleidIsSet(boolean value) {
      __isset_bit_vector.set(__MODULEID_ISSET_ID, value);
    }

    public int getUserid() {
      return this.userid;
    }

    public internalCall_args setUserid(int userid) {
      this.userid = userid;
      setUseridIsSet(true);
      return this;
    }

    public void unsetUserid() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUseridIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public int getMsgType() {
      return this.msgType;
    }

    public internalCall_args setMsgType(int msgType) {
      this.msgType = msgType;
      setMsgTypeIsSet(true);
      return this;
    }

    public void unsetMsgType() {
      __isset_bit_vector.clear(__MSGTYPE_ISSET_ID);
    }

    /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgType() {
      return __isset_bit_vector.get(__MSGTYPE_ISSET_ID);
    }

    public void setMsgTypeIsSet(boolean value) {
      __isset_bit_vector.set(__MSGTYPE_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public internalCall_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bit_vector.clear(__LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return __isset_bit_vector.get(__LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bit_vector.set(__LENGTH_ISSET_ID, value);
    }

    public byte[] getMsgData() {
      setMsgData(org.apache.thrift.TBaseHelper.rightSize(msgData));
      return msgData == null ? null : msgData.array();
    }

    public ByteBuffer bufferForMsgData() {
      return msgData;
    }

    public internalCall_args setMsgData(byte[] msgData) {
      setMsgData(msgData == null ? (ByteBuffer)null : ByteBuffer.wrap(msgData));
      return this;
    }

    public internalCall_args setMsgData(ByteBuffer msgData) {
      this.msgData = msgData;
      return this;
    }

    public void unsetMsgData() {
      this.msgData = null;
    }

    /** Returns true if field msgData is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgData() {
      return this.msgData != null;
    }

    public void setMsgDataIsSet(boolean value) {
      if (!value) {
        this.msgData = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case MODULEID:
        if (value == null) {
          unsetModuleid();
        } else {
          setModuleid((Integer)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((Integer)value);
        }
        break;

      case MSG_TYPE:
        if (value == null) {
          unsetMsgType();
        } else {
          setMsgType((Integer)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      case MSG_DATA:
        if (value == null) {
          unsetMsgData();
        } else {
          setMsgData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case MODULEID:
        return Integer.valueOf(getModuleid());

      case USERID:
        return Integer.valueOf(getUserid());

      case MSG_TYPE:
        return Integer.valueOf(getMsgType());

      case LENGTH:
        return Integer.valueOf(getLength());

      case MSG_DATA:
        return getMsgData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case MODULEID:
        return isSetModuleid();
      case USERID:
        return isSetUserid();
      case MSG_TYPE:
        return isSetMsgType();
      case LENGTH:
        return isSetLength();
      case MSG_DATA:
        return isSetMsgData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof internalCall_args)
        return this.equals((internalCall_args)that);
      return false;
    }

    public boolean equals(internalCall_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_moduleid = true;
      boolean that_present_moduleid = true;
      if (this_present_moduleid || that_present_moduleid) {
        if (!(this_present_moduleid && that_present_moduleid))
          return false;
        if (this.moduleid != that.moduleid)
          return false;
      }

      boolean this_present_userid = true;
      boolean that_present_userid = true;
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (this.userid != that.userid)
          return false;
      }

      boolean this_present_msgType = true;
      boolean that_present_msgType = true;
      if (this_present_msgType || that_present_msgType) {
        if (!(this_present_msgType && that_present_msgType))
          return false;
        if (this.msgType != that.msgType)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      boolean this_present_msgData = true && this.isSetMsgData();
      boolean that_present_msgData = true && that.isSetMsgData();
      if (this_present_msgData || that_present_msgData) {
        if (!(this_present_msgData && that_present_msgData))
          return false;
        if (!this.msgData.equals(that.msgData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(internalCall_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      internalCall_args typedOther = (internalCall_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleid()).compareTo(typedOther.isSetModuleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleid, typedOther.moduleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(typedOther.isSetMsgType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, typedOther.msgType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLength()).compareTo(typedOther.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, typedOther.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgData()).compareTo(typedOther.isSetMsgData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgData, typedOther.msgData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("internalCall_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("moduleid:");
      sb.append(this.moduleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      sb.append(this.userid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("msgType:");
      sb.append(this.msgType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      if (!first) sb.append(", ");
      sb.append("msgData:");
      if (this.msgData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.msgData, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class internalCall_argsStandardSchemeFactory implements SchemeFactory {
      public internalCall_argsStandardScheme getScheme() {
        return new internalCall_argsStandardScheme();
      }
    }

    private static class internalCall_argsStandardScheme extends StandardScheme<internalCall_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, internalCall_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MODULEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.moduleid = iprot.readI32();
                struct.setModuleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userid = iprot.readI32();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MSG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.msgType = iprot.readI32();
                struct.setMsgTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MSG_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msgData = iprot.readBinary();
                struct.setMsgDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, internalCall_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MODULEID_FIELD_DESC);
        oprot.writeI32(struct.moduleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeI32(struct.userid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.msgType);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        if (struct.msgData != null) {
          oprot.writeFieldBegin(MSG_DATA_FIELD_DESC);
          oprot.writeBinary(struct.msgData);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class internalCall_argsTupleSchemeFactory implements SchemeFactory {
      public internalCall_argsTupleScheme getScheme() {
        return new internalCall_argsTupleScheme();
      }
    }

    private static class internalCall_argsTupleScheme extends TupleScheme<internalCall_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, internalCall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetModuleid()) {
          optionals.set(1);
        }
        if (struct.isSetUserid()) {
          optionals.set(2);
        }
        if (struct.isSetMsgType()) {
          optionals.set(3);
        }
        if (struct.isSetLength()) {
          optionals.set(4);
        }
        if (struct.isSetMsgData()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetModuleid()) {
          oprot.writeI32(struct.moduleid);
        }
        if (struct.isSetUserid()) {
          oprot.writeI32(struct.userid);
        }
        if (struct.isSetMsgType()) {
          oprot.writeI32(struct.msgType);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
        if (struct.isSetMsgData()) {
          oprot.writeBinary(struct.msgData);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, internalCall_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.moduleid = iprot.readI32();
          struct.setModuleidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userid = iprot.readI32();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(3)) {
          struct.msgType = iprot.readI32();
          struct.setMsgTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
        if (incoming.get(5)) {
          struct.msgData = iprot.readBinary();
          struct.setMsgDataIsSet(true);
        }
      }
    }

  }

  public static class internalCall_result implements org.apache.thrift.TBase<internalCall_result, internalCall_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("internalCall_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new internalCall_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new internalCall_resultTupleSchemeFactory());
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(internalCall_result.class, metaDataMap);
    }

    public internalCall_result() {
    }

    public internalCall_result(
      com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public internalCall_result(internalCall_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse(other.success);
      }
    }

    public internalCall_result deepCopy() {
      return new internalCall_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse getSuccess() {
      return this.success;
    }

    public internalCall_result setSuccess(com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof internalCall_result)
        return this.equals((internalCall_result)that);
      return false;
    }

    public boolean equals(internalCall_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(internalCall_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      internalCall_result typedOther = (internalCall_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("internalCall_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class internalCall_resultStandardSchemeFactory implements SchemeFactory {
      public internalCall_resultStandardScheme getScheme() {
        return new internalCall_resultStandardScheme();
      }
    }

    private static class internalCall_resultStandardScheme extends StandardScheme<internalCall_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, internalCall_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, internalCall_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class internalCall_resultTupleSchemeFactory implements SchemeFactory {
      public internalCall_resultTupleScheme getScheme() {
        return new internalCall_resultTupleScheme();
      }
    }

    private static class internalCall_resultTupleScheme extends TupleScheme<internalCall_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, internalCall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, internalCall_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TInternalResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class logout_args implements org.apache.thrift.TBase<logout_args, logout_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField MODULEID_FIELD_DESC = new org.apache.thrift.protocol.TField("moduleid", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ROOMID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomid", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logout_argsTupleSchemeFactory());
    }

    public String token; // required
    public int userid; // required
    public int moduleid; // required
    public int roomid; // required
    /**
     * 
     * @see LogoutReason
     */
    public LogoutReason reason; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      USERID((short)2, "userid"),
      MODULEID((short)3, "moduleid"),
      ROOMID((short)4, "roomid"),
      /**
       * 
       * @see LogoutReason
       */
      REASON((short)5, "reason");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // USERID
            return USERID;
          case 3: // MODULEID
            return MODULEID;
          case 4: // ROOMID
            return ROOMID;
          case 5: // REASON
            return REASON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __MODULEID_ISSET_ID = 1;
    private static final int __ROOMID_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MODULEID, new org.apache.thrift.meta_data.FieldMetaData("moduleid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ROOMID, new org.apache.thrift.meta_data.FieldMetaData("roomid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogoutReason.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_args.class, metaDataMap);
    }

    public logout_args() {
    }

    public logout_args(
      String token,
      int userid,
      int moduleid,
      int roomid,
      LogoutReason reason)
    {
      this();
      this.token = token;
      this.userid = userid;
      setUseridIsSet(true);
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      this.roomid = roomid;
      setRoomidIsSet(true);
      this.reason = reason;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.userid = other.userid;
      this.moduleid = other.moduleid;
      this.roomid = other.roomid;
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setUseridIsSet(false);
      this.userid = 0;
      setModuleidIsSet(false);
      this.moduleid = 0;
      setRoomidIsSet(false);
      this.roomid = 0;
      this.reason = null;
    }

    public String getToken() {
      return this.token;
    }

    public logout_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getUserid() {
      return this.userid;
    }

    public logout_args setUserid(int userid) {
      this.userid = userid;
      setUseridIsSet(true);
      return this;
    }

    public void unsetUserid() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUseridIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public int getModuleid() {
      return this.moduleid;
    }

    public logout_args setModuleid(int moduleid) {
      this.moduleid = moduleid;
      setModuleidIsSet(true);
      return this;
    }

    public void unsetModuleid() {
      __isset_bit_vector.clear(__MODULEID_ISSET_ID);
    }

    /** Returns true if field moduleid is set (has been assigned a value) and false otherwise */
    public boolean isSetModuleid() {
      return __isset_bit_vector.get(__MODULEID_ISSET_ID);
    }

    public void setModuleidIsSet(boolean value) {
      __isset_bit_vector.set(__MODULEID_ISSET_ID, value);
    }

    public int getRoomid() {
      return this.roomid;
    }

    public logout_args setRoomid(int roomid) {
      this.roomid = roomid;
      setRoomidIsSet(true);
      return this;
    }

    public void unsetRoomid() {
      __isset_bit_vector.clear(__ROOMID_ISSET_ID);
    }

    /** Returns true if field roomid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomid() {
      return __isset_bit_vector.get(__ROOMID_ISSET_ID);
    }

    public void setRoomidIsSet(boolean value) {
      __isset_bit_vector.set(__ROOMID_ISSET_ID, value);
    }

    /**
     * 
     * @see LogoutReason
     */
    public LogoutReason getReason() {
      return this.reason;
    }

    /**
     * 
     * @see LogoutReason
     */
    public logout_args setReason(LogoutReason reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((Integer)value);
        }
        break;

      case MODULEID:
        if (value == null) {
          unsetModuleid();
        } else {
          setModuleid((Integer)value);
        }
        break;

      case ROOMID:
        if (value == null) {
          unsetRoomid();
        } else {
          setRoomid((Integer)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((LogoutReason)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case USERID:
        return Integer.valueOf(getUserid());

      case MODULEID:
        return Integer.valueOf(getModuleid());

      case ROOMID:
        return Integer.valueOf(getRoomid());

      case REASON:
        return getReason();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case USERID:
        return isSetUserid();
      case MODULEID:
        return isSetModuleid();
      case ROOMID:
        return isSetRoomid();
      case REASON:
        return isSetReason();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_userid = true;
      boolean that_present_userid = true;
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (this.userid != that.userid)
          return false;
      }

      boolean this_present_moduleid = true;
      boolean that_present_moduleid = true;
      if (this_present_moduleid || that_present_moduleid) {
        if (!(this_present_moduleid && that_present_moduleid))
          return false;
        if (this.moduleid != that.moduleid)
          return false;
      }

      boolean this_present_roomid = true;
      boolean that_present_roomid = true;
      if (this_present_roomid || that_present_roomid) {
        if (!(this_present_roomid && that_present_roomid))
          return false;
        if (this.roomid != that.roomid)
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logout_args typedOther = (logout_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetModuleid()).compareTo(typedOther.isSetModuleid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModuleid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moduleid, typedOther.moduleid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomid()).compareTo(typedOther.isSetRoomid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomid, typedOther.roomid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReason()).compareTo(typedOther.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, typedOther.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logout_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      sb.append(this.userid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("moduleid:");
      sb.append(this.moduleid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomid:");
      sb.append(this.roomid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_argsStandardSchemeFactory implements SchemeFactory {
      public logout_argsStandardScheme getScheme() {
        return new logout_argsStandardScheme();
      }
    }

    private static class logout_argsStandardScheme extends StandardScheme<logout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userid = iprot.readI32();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODULEID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.moduleid = iprot.readI32();
                struct.setModuleidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ROOMID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.roomid = iprot.readI32();
                struct.setRoomidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.reason = LogoutReason.findByValue(iprot.readI32());
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeI32(struct.userid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MODULEID_FIELD_DESC);
        oprot.writeI32(struct.moduleid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ROOMID_FIELD_DESC);
        oprot.writeI32(struct.roomid);
        oprot.writeFieldEnd();
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeI32(struct.reason.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_argsTupleSchemeFactory implements SchemeFactory {
      public logout_argsTupleScheme getScheme() {
        return new logout_argsTupleScheme();
      }
    }

    private static class logout_argsTupleScheme extends TupleScheme<logout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetUserid()) {
          optionals.set(1);
        }
        if (struct.isSetModuleid()) {
          optionals.set(2);
        }
        if (struct.isSetRoomid()) {
          optionals.set(3);
        }
        if (struct.isSetReason()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetUserid()) {
          oprot.writeI32(struct.userid);
        }
        if (struct.isSetModuleid()) {
          oprot.writeI32(struct.moduleid);
        }
        if (struct.isSetRoomid()) {
          oprot.writeI32(struct.roomid);
        }
        if (struct.isSetReason()) {
          oprot.writeI32(struct.reason.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userid = iprot.readI32();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(2)) {
          struct.moduleid = iprot.readI32();
          struct.setModuleidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.roomid = iprot.readI32();
          struct.setRoomidIsSet(true);
        }
        if (incoming.get(4)) {
          struct.reason = LogoutReason.findByValue(iprot.readI32());
          struct.setReasonIsSet(true);
        }
      }
    }

  }

  public static class logout_result implements org.apache.thrift.TBase<logout_result, logout_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logout_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new logout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new logout_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see LogoutStatus
     */
    public LogoutStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see LogoutStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LogoutStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logout_result.class, metaDataMap);
    }

    public logout_result() {
    }

    public logout_result(
      LogoutStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see LogoutStatus
     */
    public LogoutStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see LogoutStatus
     */
    public logout_result setSuccess(LogoutStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LogoutStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(logout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      logout_result typedOther = (logout_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("logout_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logout_resultStandardSchemeFactory implements SchemeFactory {
      public logout_resultStandardScheme getScheme() {
        return new logout_resultStandardScheme();
      }
    }

    private static class logout_resultStandardScheme extends StandardScheme<logout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = LogoutStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logout_resultTupleSchemeFactory implements SchemeFactory {
      public logout_resultTupleScheme getScheme() {
        return new logout_resultTupleScheme();
      }
    }

    private static class logout_resultTupleScheme extends TupleScheme<logout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = LogoutStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reconnect_args implements org.apache.thrift.TBase<reconnect_args, reconnect_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reconnect_args");

    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("userid", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reconnect_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reconnect_argsTupleSchemeFactory());
    }

    public String token; // required
    public int userid; // required
    public String params; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOKEN((short)1, "token"),
      USERID((short)2, "userid"),
      PARAMS((short)3, "params");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOKEN
            return TOKEN;
          case 2: // USERID
            return USERID;
          case 3: // PARAMS
            return PARAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERID, new org.apache.thrift.meta_data.FieldMetaData("userid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reconnect_args.class, metaDataMap);
    }

    public reconnect_args() {
    }

    public reconnect_args(
      String token,
      int userid,
      String params)
    {
      this();
      this.token = token;
      this.userid = userid;
      setUseridIsSet(true);
      this.params = params;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reconnect_args(reconnect_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetToken()) {
        this.token = other.token;
      }
      this.userid = other.userid;
      if (other.isSetParams()) {
        this.params = other.params;
      }
    }

    public reconnect_args deepCopy() {
      return new reconnect_args(this);
    }

    @Override
    public void clear() {
      this.token = null;
      setUseridIsSet(false);
      this.userid = 0;
      this.params = null;
    }

    public String getToken() {
      return this.token;
    }

    public reconnect_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public int getUserid() {
      return this.userid;
    }

    public reconnect_args setUserid(int userid) {
      this.userid = userid;
      setUseridIsSet(true);
      return this;
    }

    public void unsetUserid() {
      __isset_bit_vector.clear(__USERID_ISSET_ID);
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return __isset_bit_vector.get(__USERID_ISSET_ID);
    }

    public void setUseridIsSet(boolean value) {
      __isset_bit_vector.set(__USERID_ISSET_ID, value);
    }

    public String getParams() {
      return this.params;
    }

    public reconnect_args setParams(String params) {
      this.params = params;
      return this;
    }

    public void unsetParams() {
      this.params = null;
    }

    /** Returns true if field params is set (has been assigned a value) and false otherwise */
    public boolean isSetParams() {
      return this.params != null;
    }

    public void setParamsIsSet(boolean value) {
      if (!value) {
        this.params = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserid();
        } else {
          setUserid((Integer)value);
        }
        break;

      case PARAMS:
        if (value == null) {
          unsetParams();
        } else {
          setParams((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TOKEN:
        return getToken();

      case USERID:
        return Integer.valueOf(getUserid());

      case PARAMS:
        return getParams();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TOKEN:
        return isSetToken();
      case USERID:
        return isSetUserid();
      case PARAMS:
        return isSetParams();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reconnect_args)
        return this.equals((reconnect_args)that);
      return false;
    }

    public boolean equals(reconnect_args that) {
      if (that == null)
        return false;

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_userid = true;
      boolean that_present_userid = true;
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (this.userid != that.userid)
          return false;
      }

      boolean this_present_params = true && this.isSetParams();
      boolean that_present_params = true && that.isSetParams();
      if (this_present_params || that_present_params) {
        if (!(this_present_params && that_present_params))
          return false;
        if (!this.params.equals(that.params))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reconnect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reconnect_args typedOther = (reconnect_args)other;

      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserid()).compareTo(typedOther.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userid, typedOther.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParams()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reconnect_args(");
      boolean first = true;

      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      sb.append(this.userid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("params:");
      if (this.params == null) {
        sb.append("null");
      } else {
        sb.append(this.params);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reconnect_argsStandardSchemeFactory implements SchemeFactory {
      public reconnect_argsStandardScheme getScheme() {
        return new reconnect_argsStandardScheme();
      }
    }

    private static class reconnect_argsStandardScheme extends StandardScheme<reconnect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reconnect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userid = iprot.readI32();
                struct.setUseridIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.params = iprot.readString();
                struct.setParamsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reconnect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeI32(struct.userid);
        oprot.writeFieldEnd();
        if (struct.params != null) {
          oprot.writeFieldBegin(PARAMS_FIELD_DESC);
          oprot.writeString(struct.params);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reconnect_argsTupleSchemeFactory implements SchemeFactory {
      public reconnect_argsTupleScheme getScheme() {
        return new reconnect_argsTupleScheme();
      }
    }

    private static class reconnect_argsTupleScheme extends TupleScheme<reconnect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reconnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetToken()) {
          optionals.set(0);
        }
        if (struct.isSetUserid()) {
          optionals.set(1);
        }
        if (struct.isSetParams()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetUserid()) {
          oprot.writeI32(struct.userid);
        }
        if (struct.isSetParams()) {
          oprot.writeString(struct.params);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reconnect_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userid = iprot.readI32();
          struct.setUseridIsSet(true);
        }
        if (incoming.get(2)) {
          struct.params = iprot.readString();
          struct.setParamsIsSet(true);
        }
      }
    }

  }

  public static class reconnect_result implements org.apache.thrift.TBase<reconnect_result, reconnect_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reconnect_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reconnect_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reconnect_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reconnect_result.class, metaDataMap);
    }

    public reconnect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reconnect_result(reconnect_result other) {
    }

    public reconnect_result deepCopy() {
      return new reconnect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reconnect_result)
        return this.equals((reconnect_result)that);
      return false;
    }

    public boolean equals(reconnect_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(reconnect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      reconnect_result typedOther = (reconnect_result)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reconnect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reconnect_resultStandardSchemeFactory implements SchemeFactory {
      public reconnect_resultStandardScheme getScheme() {
        return new reconnect_resultStandardScheme();
      }
    }

    private static class reconnect_resultStandardScheme extends StandardScheme<reconnect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reconnect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reconnect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reconnect_resultTupleSchemeFactory implements SchemeFactory {
      public reconnect_resultTupleScheme getScheme() {
        return new reconnect_resultTupleScheme();
      }
    }

    private static class reconnect_resultTupleScheme extends TupleScheme<reconnect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reconnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reconnect_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class perform_args implements org.apache.thrift.TBase<perform_args, perform_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("perform_args");

    private static final org.apache.thrift.protocol.TField CMD_FIELD_DESC = new org.apache.thrift.protocol.TField("cmd", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new perform_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new perform_argsTupleSchemeFactory());
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand
     */
    public com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd; // required
    public String token; // required
    public com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand
       */
      CMD((short)1, "cmd"),
      TOKEN((short)2, "token"),
      DATA((short)3, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CMD
            return CMD;
          case 2: // TOKEN
            return TOKEN;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CMD, new org.apache.thrift.meta_data.FieldMetaData("cmd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand.class)));
      tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(perform_args.class, metaDataMap);
    }

    public perform_args() {
    }

    public perform_args(
      com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd,
      String token,
      com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data)
    {
      this();
      this.cmd = cmd;
      this.token = token;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public perform_args(perform_args other) {
      if (other.isSetCmd()) {
        this.cmd = other.cmd;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
      if (other.isSetData()) {
        this.data = new com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest(other.data);
      }
    }

    public perform_args deepCopy() {
      return new perform_args(this);
    }

    @Override
    public void clear() {
      this.cmd = null;
      this.token = null;
      this.data = null;
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand
     */
    public com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand getCmd() {
      return this.cmd;
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand
     */
    public perform_args setCmd(com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand cmd) {
      this.cmd = cmd;
      return this;
    }

    public void unsetCmd() {
      this.cmd = null;
    }

    /** Returns true if field cmd is set (has been assigned a value) and false otherwise */
    public boolean isSetCmd() {
      return this.cmd != null;
    }

    public void setCmdIsSet(boolean value) {
      if (!value) {
        this.cmd = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public perform_args setToken(String token) {
      this.token = token;
      return this;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest getData() {
      return this.data;
    }

    public perform_args setData(com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CMD:
        if (value == null) {
          unsetCmd();
        } else {
          setCmd((com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand)value);
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          setToken((String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CMD:
        return getCmd();

      case TOKEN:
        return getToken();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CMD:
        return isSetCmd();
      case TOKEN:
        return isSetToken();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof perform_args)
        return this.equals((perform_args)that);
      return false;
    }

    public boolean equals(perform_args that) {
      if (that == null)
        return false;

      boolean this_present_cmd = true && this.isSetCmd();
      boolean that_present_cmd = true && that.isSetCmd();
      if (this_present_cmd || that_present_cmd) {
        if (!(this_present_cmd && that_present_cmd))
          return false;
        if (!this.cmd.equals(that.cmd))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(perform_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      perform_args typedOther = (perform_args)other;

      lastComparison = Boolean.valueOf(isSetCmd()).compareTo(typedOther.isSetCmd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCmd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmd, typedOther.cmd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("perform_args(");
      boolean first = true;

      sb.append("cmd:");
      if (this.cmd == null) {
        sb.append("null");
      } else {
        sb.append(this.cmd);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class perform_argsStandardSchemeFactory implements SchemeFactory {
      public perform_argsStandardScheme getScheme() {
        return new perform_argsStandardScheme();
      }
    }

    private static class perform_argsStandardScheme extends StandardScheme<perform_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, perform_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CMD
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.cmd = com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand.findByValue(iprot.readI32());
                struct.setCmdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOKEN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.token = iprot.readString();
                struct.setTokenIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, perform_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cmd != null) {
          oprot.writeFieldBegin(CMD_FIELD_DESC);
          oprot.writeI32(struct.cmd.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.token != null) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class perform_argsTupleSchemeFactory implements SchemeFactory {
      public perform_argsTupleScheme getScheme() {
        return new perform_argsTupleScheme();
      }
    }

    private static class perform_argsTupleScheme extends TupleScheme<perform_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, perform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCmd()) {
          optionals.set(0);
        }
        if (struct.isSetToken()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCmd()) {
          oprot.writeI32(struct.cmd.getValue());
        }
        if (struct.isSetToken()) {
          oprot.writeString(struct.token);
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, perform_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cmd = com.bliss.framework.thriftgen.xgame.tcommon.AdminCommand.findByValue(iprot.readI32());
          struct.setCmdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.token = iprot.readString();
          struct.setTokenIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = new com.bliss.framework.thriftgen.xgame.tcommon.TAdminRequest();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class perform_result implements org.apache.thrift.TBase<perform_result, perform_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("perform_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new perform_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new perform_resultTupleSchemeFactory());
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(perform_result.class, metaDataMap);
    }

    public perform_result() {
    }

    public perform_result(
      com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public perform_result(perform_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo(other.success);
      }
    }

    public perform_result deepCopy() {
      return new perform_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo getSuccess() {
      return this.success;
    }

    public perform_result setSuccess(com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof perform_result)
        return this.equals((perform_result)that);
      return false;
    }

    public boolean equals(perform_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(perform_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      perform_result typedOther = (perform_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("perform_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class perform_resultStandardSchemeFactory implements SchemeFactory {
      public perform_resultStandardScheme getScheme() {
        return new perform_resultStandardScheme();
      }
    }

    private static class perform_resultStandardScheme extends StandardScheme<perform_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, perform_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, perform_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class perform_resultTupleSchemeFactory implements SchemeFactory {
      public perform_resultTupleScheme getScheme() {
        return new perform_resultTupleScheme();
      }
    }

    private static class perform_resultTupleScheme extends TupleScheme<perform_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, perform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, perform_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.bliss.framework.thriftgen.xgame.tcommon.TResponseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getStatus_args implements org.apache.thrift.TBase<getStatus_args, getStatus_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatus_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_args.class, metaDataMap);
    }

    public getStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_args(getStatus_args other) {
    }

    public getStatus_args deepCopy() {
      return new getStatus_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_args)
        return this.equals((getStatus_args)that);
      return false;
    }

    public boolean equals(getStatus_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_args typedOther = (getStatus_args)other;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_argsStandardSchemeFactory implements SchemeFactory {
      public getStatus_argsStandardScheme getScheme() {
        return new getStatus_argsStandardScheme();
      }
    }

    private static class getStatus_argsStandardScheme extends StandardScheme<getStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_argsTupleSchemeFactory implements SchemeFactory {
      public getStatus_argsTupleScheme getScheme() {
        return new getStatus_argsTupleScheme();
      }
    }

    private static class getStatus_argsTupleScheme extends TupleScheme<getStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getStatus_result implements org.apache.thrift.TBase<getStatus_result, getStatus_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getStatus_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus
     */
    public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getStatus_result.class, metaDataMap);
    }

    public getStatus_result() {
    }

    public getStatus_result(
      com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getStatus_result(getStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getStatus_result deepCopy() {
      return new getStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus
     */
    public com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus
     */
    public getStatus_result setSuccess(com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getStatus_result)
        return this.equals((getStatus_result)that);
      return false;
    }

    public boolean equals(getStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(getStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      getStatus_result typedOther = (getStatus_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getStatus_resultStandardSchemeFactory implements SchemeFactory {
      public getStatus_resultStandardScheme getScheme() {
        return new getStatus_resultStandardScheme();
      }
    }

    private static class getStatus_resultStandardScheme extends StandardScheme<getStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getStatus_resultTupleSchemeFactory implements SchemeFactory {
      public getStatus_resultTupleScheme getScheme() {
        return new getStatus_resultTupleScheme();
      }
    }

    private static class getStatus_resultTupleScheme extends TupleScheme<getStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = com.bliss.framework.thriftgen.xgame.tcommon.ServiceStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
